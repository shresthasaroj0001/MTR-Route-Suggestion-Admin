<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>